// Copyright 2015 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package runtime

import (
	"math/big"
	"strings"
	"testing"

	"github.com/juchain/go-juchain/vm/solc/abi"
	"github.com/juchain/go-juchain/common"
	"github.com/juchain/go-juchain/core/state"
	"github.com/juchain/go-juchain/vm/solc"
	"github.com/juchain/go-juchain/core/store"
)

func TestDefaults(t *testing.T) {
	cfg := new(Config)
	setDefaults(cfg)

	if cfg.Difficulty == nil {
		t.Error("expected difficulty to be non nil")
	}

	if cfg.Time == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.GasLimit == 0 {
		t.Error("didn't expect gaslimit to be zero")
	}
	if cfg.GasPrice == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.Value == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.GetHashFn == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.BlockNumber == nil {
		t.Error("expected block number to be non nil")
	}
}

func TestEVM(t *testing.T) {
	defer func() {
		if r := recover(); r != nil {
			t.Fatalf("crashed with: %v", r)
		}
	}()

	Execute([]byte{
		byte(vm.DIFFICULTY),
		byte(vm.TIMESTAMP),
		byte(vm.GASLIMIT),
		byte(vm.PUSH1),
		byte(vm.ORIGIN),
		byte(vm.BLOCKHASH),
		byte(vm.COINBASE),
	}, nil, nil)
}

func TestExecute(t *testing.T) {
	ret, _, err := Execute([]byte{
		byte(vm.PUSH1), 10,
		byte(vm.PUSH1), 0,
		byte(vm.MSTORE),
		byte(vm.PUSH1), 32,
		byte(vm.PUSH1), 0,
		byte(vm.RETURN),
	}, nil, nil)
	if err != nil {
		t.Fatal("didn't expect error", err)
	}

	num := new(big.Int).SetBytes(ret)
	if num.Cmp(big.NewInt(10)) != 0 {
		t.Error("Expected 10, got", num)
	}
}

func TestCall(t *testing.T) {
	db, _ := store.NewMemDatabase()
	state, _ := state.New(common.Hash{}, state.NewDatabase(db))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, []byte{
		byte(vm.PUSH1), 10,
		byte(vm.PUSH1), 0,
		byte(vm.MSTORE),
		byte(vm.PUSH1), 32,
		byte(vm.PUSH1), 0,
		byte(vm.RETURN),
	})

	ret, _, err := Call(address, nil, &Config{State: state})
	if err != nil {
		t.Fatal("didn't expect error", err)
	}

	num := new(big.Int).SetBytes(ret)
	if num.Cmp(big.NewInt(10)) != 0 {
		t.Error("Expected 10, got", num)
	}
}

func BenchmarkCall(b *testing.B) {
	var definition = `[{"constant":true,"inputs":[],"name":"seller","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"abort","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"value","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"refund","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"buyer","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"confirmReceived","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"state","outputs":[{"name":"","type":"uint8"}],"type":"function"},{"constant":false,"inputs":[],"name":"confirmPurchase","outputs":[],"type":"function"},{"inputs":[],"type":"constructor"},{"anonymous":false,"inputs":[],"name":"Aborted","type":"event"},{"anonymous":false,"inputs":[],"name":"PurchaseConfirmed","type":"event"},{"anonymous":false,"inputs":[],"name":"ItemReceived","type":"event"},{"anonymous":false,"inputs":[],"name":"Refunded","type":"event"}]`

	var code = common.Hex2Bytes("6060604052361561006c5760e060020a600035046308551a53811461007457806335a063b4146100865780633fa4f245146100a6578063590e1ae3146100af5780637150d8ae146100cf57806373fac6f0146100e1578063c19d93fb146100fe578063d696069714610112575b610131610002565b610133600154600160a060020a031681565b610131600154600160a060020a0390811633919091161461015057610002565b61014660005481565b610131600154600160a060020a039081163391909116146102d557610002565b610133600254600160a060020a031681565b610131600254600160a060020a0333811691161461023757610002565b61014660025460ff60a060020a9091041681565b61013160025460009060ff60a060020a9091041681146101cc57610002565b005b600160a060020a03166060908152602090f35b6060908152602090f35b60025460009060a060020a900460ff16811461016b57610002565b600154600160a060020a03908116908290301631606082818181858883f150506002805460a060020a60ff02191660a160020a179055506040517f72c874aeff0b183a56e2b79c71b46e1aed4dee5e09862134b8821ba2fddbf8bf9250a150565b80546002023414806101dd57610002565b6002805460a060020a60ff021973ffffffffffffffffffffffffffffffffffffffff1990911633171660a060020a1790557fd5d55c8a68912e9a110618df8d5e2e83b8d83211c57a8ddd1203df92885dc881826060a15050565b60025460019060a060020a900460ff16811461025257610002565b60025460008054600160a060020a0390921691606082818181858883f150508354604051600160a060020a0391821694503090911631915082818181858883f150506002805460a060020a60ff02191660a160020a179055506040517fe89152acd703c9d8c7d28829d443260b411454d45394e7995815140c8cbcbcf79250a150565b60025460019060a060020a900460ff1681146102f057610002565b6002805460008054600160a060020a0390921692909102606082818181858883f150508354604051600160a060020a0391821694503090911631915082818181858883f150506002805460a060020a60ff02191660a160020a179055506040517f8616bbbbad963e4e65b1366f1d75dfb63f9e9704bbbf91fb01bec70849906cf79250a15056")

	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		b.Fatal(err)
	}

	cpurchase, err := abi.Pack("confirmPurchase")
	if err != nil {
		b.Fatal(err)
	}
	creceived, err := abi.Pack("confirmReceived")
	if err != nil {
		b.Fatal(err)
	}
	refund, err := abi.Pack("refund")
	if err != nil {
		b.Fatal(err)
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for j := 0; j < 400; j++ {
			Execute(code, cpurchase, nil)
			Execute(code, creceived, nil)
			Execute(code, refund, nil)
		}
	}
}

func TestCallDApp(t *testing.T) {
	var definition = `[
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "dappIds",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "orgDescription",
				"type": "string"
			},
			{
				"name": "ledgerReplicated",
				"type": "uint8"
			},
			{
				"name": "icon",
				"type": "string"
			}
		],
		"name": "updateDAppInfo",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "dappName",
				"type": "string"
			},
			{
				"name": "orgName",
				"type": "string"
			},
			{
				"name": "orgDescription",
				"type": "string"
			},
			{
				"name": "nationalityCode",
				"type": "uint8"
			},
			{
				"name": "ledgerReplicated",
				"type": "uint8"
			},
			{
				"name": "icon",
				"type": "string"
			}
		],
		"name": "registerDAppInfo",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"name": "dappInfoMap",
		"outputs": [
			{
				"name": "dappAddress",
				"type": "address"
			},
			{
				"name": "dappName",
				"type": "string"
			},
			{
				"name": "orgName",
				"type": "string"
			},
			{
				"name": "orgDescription",
				"type": "string"
			},
			{
				"name": "nationalityCode",
				"type": "uint8"
			},
			{
				"name": "ledgerReplicated",
				"type": "uint8"
			},
			{
				"name": "icon",
				"type": "string"
			},
			{
				"name": "state",
				"type": "uint8"
			},
			{
				"name": "lastActive",
				"type": "uint256"
			},
			{
				"name": "initialized",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "test",
		"outputs": [],
		"payable": false,
		"stateMutability": "pure",
		"type": "function"
	},
	{
		"payable": true,
		"stateMutability": "payable",
		"type": "fallback"
	},
	{
		"anonymous": false,
		"inputs": [],
		"name": "UpdateDAppInfoAccepted",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [],
		"name": "RegisterDAppInfoAccepted",
		"type": "event"
	}
]`

	var code = common.Hex2Bytes("608060405234801561001057600080fd5b50610b58806100206000396000f30060806040526004361061006c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166387bc3e57811461007157806392ce8ce8146100a5578063caedcbb914610147578063de9a0ffa1461026f578063f8a8fd6d1461048c575b600080fd5b34801561007d57600080fd5b506100896004356104a1565b60408051600160a060020a039092168252519081900360200190f35b3480156100b157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261014594369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b60ff8b35169b909a9099940197509195509182019350915081908401838280828437509497506104c99650505050505050565b005b34801561015357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261014594369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020888301358a018035601f8101839004830284018301909452838352979a893560ff9081169b8b8401359091169a9199909850606090910196509194509081019250819084018382808284375094975061059f9650505050505050565b34801561027b57600080fd5b50610290600160a060020a0360043516610803565b604051808b600160a060020a0316600160a060020a031681526020018060200180602001806020018a60ff1660ff1681526020018960ff1660ff168152602001806020018860ff1660ff1681526020018781526020018615151515815260200185810385528e818151815260200191508051906020019080838360005b8381101561032557818101518382015260200161030d565b50505050905090810190601f1680156103525780820380516001836020036101000a031916815260200191505b5085810384528d5181528d516020918201918f019080838360005b8381101561038557818101518382015260200161036d565b50505050905090810190601f1680156103b25780820380516001836020036101000a031916815260200191505b5085810383528c5181528c516020918201918e019080838360005b838110156103e55781810151838201526020016103cd565b50505050905090810190601f1680156104125780820380516001836020036101000a031916815260200191505b5085810382528951815289516020918201918b019080838360005b8381101561044557818101518382015260200161042d565b50505050905090810190601f1680156104725780820380516001836020036101000a031916815260200191505b509e50505050505050505050505050505060405180910390f35b34801561049857600080fd5b50610145610a8f565b60018054829081106104af57fe5b600091825260209091200154600160a060020a0316905081565b600160a060020a03331660009081526020819052604081206008015460ff1615156001146104f657600080fd5b835160001061050457600080fd5b600060ff84161161051457600080fd5b50600160a060020a03331660009081526020818152604090912084519091610543916003840191870190610a91565b5060048101805461ff00191661010060ff861602179055815161056f9060058301906020850190610a91565b506040517f3c22cfbecb928778078fb52ac2ece267e23d58f14308b86f1645e39aaad0197890600090a150505050565b600160a060020a03331660009081526020819052604090206008015460ff16156105c857600080fd5b85516000106105d657600080fd5b84516000106105e457600080fd5b83516000106105f257600080fd5b600060ff84161161060257600080fd5b600060ff83161161061257600080fd5b604080516101408101825233600160a060020a0390811680835260208084018b81528486018b9052606085018a905260ff8981166080870152881660a086015260c08501879052600160e086018190524261010087015261012086018190526000938452838352959092208451815473ffffffffffffffffffffffffffffffffffffffff1916941693909317835590518051939492936106b9938501929190910190610a91565b50604082015180516106d5916002840191602090910190610a91565b50606082015180516106f1916003840191602090910190610a91565b50608082015160048201805460a085015160ff9081166101000261ff00199190941660ff19909216919091171691909117905560c0820151805161073f916005840191602090910190610a91565b5060e082015160068201805460ff90921660ff19928316179055610100830151600783015561012090920151600890910180549115159190921617905560018054808201825560009182527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054600160a060020a03331673ffffffffffffffffffffffffffffffffffffffff199091161790556040517f6142ff54c11c1eb59d0a251a917b38ccd85c84dc4c83c021e8662a73d557b0059190a1505050505050565b600060208181529181526040908190208054600180830180548551600261010094831615949094026000190190911692909204601f8101879004870283018701909552848252600160a060020a0390921694929390928301828280156108aa5780601f1061087f576101008083540402835291602001916108aa565b820191906000526020600020905b81548152906001019060200180831161088d57829003601f168201915b50505060028085018054604080516020601f600019610100600187161502019094169590950492830185900485028101850190915281815295969594509092509083018282801561093c5780601f106109115761010080835404028352916020019161093c565b820191906000526020600020905b81548152906001019060200180831161091f57829003601f168201915b5050505060038301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529495949350908301828280156109cc5780601f106109a1576101008083540402835291602001916109cc565b820191906000526020600020905b8154815290600101906020018083116109af57829003601f168201915b5050505060048301546005840180546040805160206002610100600186161581026000190190951604601f8101829004820283018201909352828252969760ff808716989490960490951695509291830182828015610a6c5780601f10610a4157610100808354040283529160200191610a6c565b820191906000526020600020905b815481529060010190602001808311610a4f57829003601f168201915b5050505060068301546007840154600890940154929360ff91821693909250168a565b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ad257805160ff1916838001178555610aff565b82800160010185558215610aff579182015b82811115610aff578251825591602001919060010190610ae4565b50610b0b929150610b0f565b5090565b610b2991905b80821115610b0b5760008155600101610b15565b905600a165627a7a7230582034ddd8d5011f65169a0f3994d3f88474f586b7f9c4257efdffb6fe8cb2f7dd960029")

	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}

	cpurchase, err := abi.Pack("test")
	if err != nil || cpurchase == nil{
		t.Fatal(err)
	}
	Create(code, nil)
}